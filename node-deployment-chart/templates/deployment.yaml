{{- if .Values.serverDeployment.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    helm.sh/resource-policy: keep
    karpenter.sh/do-not-disrupt: "true"
  labels:
    app: {{.Values.application.name }}
    versionTag: {{.Values.application.versionTag}}
  name: {{.Values.application.name}}
spec:
  {{ if .Values.albIngress.enabled }}
  replicas: 0
  {{ else }}
  {{ if .Values.replicaCount }}
  replicas: {{ .Values.replicaCount }}
  {{ end }}
  {{ end }}
  selector:
    matchLabels:
      app: {{.Values.application.name }}
  strategy:
    {{- if .Values.strategy -}}
    {{ toYaml .Values.strategy | nindent 4 }}
    {{- else -}}
    {{ toYaml .Values.defaultStrategy | nindent 4 }}
    {{- end }}
  template:
    metadata:
      annotations:
        timestamp: {{ now | quote }}
        co.elastic.logs/enabled: "true"
        co.elastic.logs/json.add_error_key: "true"
        co.elastic.logs/json.keys_under_root: "true"
        co.elastic.logs/json.message_key: payload
      creationTimestamp: null
      labels:
        app: {{.Values.application.name }}
        mode: backend
    spec:   
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: {{.Values.application.name }}
      dnsConfig:
          options:
          - name: ndots
            value: "2"
      containers:
      - env: {{- range $index := .Values.env }}
          {{- with $index }}
          - name: {{.name}}
            value: {{.value}}  
          {{- end }} {{- end }}
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: K8S_POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: K8S_POD_UID
            valueFrom:
              fieldRef:
                fieldPath: metadata.uid
          - name: OTEL_EXPORTER_OTLP_INSECURE
            value: "true"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: $(HOST_IP):4317
          - name: SIGNOZ_APP_NAME
            value: {{ if eq "backend" .Values.application.name }} "probo-{{.Values.application.name}}" {{ else }} {{.Values.application.name}} {{end}}
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(SIGNOZ_APP_NAME),k8s.pod.ip=$(K8S_POD_IP),k8s.pod.uid=$(K8S_POD_UID)
        image: "{{.Values.image.repository}}:{{.Values.image.tag}}"
        imagePullPolicy: {{.Values.image.pullPolicy}}
        name: {{.Values.application.name}}
        command: {{ if .Values.command }} {{ toYaml .Values.command | nindent 10 }} {{ else }} ["node", "app.js", "&&", "tail" , "-f", ""] {{ end }}
        livenessProbe:
          httpGet:
            path: {{.Values.service.healthPath}}
            port: {{.Values.service.targetPort}}
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: {{.Values.service.healthPath}}
            port: {{.Values.service.targetPort}}
          initialDelaySeconds: 3
          periodSeconds: 3
        startupProbe:
          httpGet:
            path: {{.Values.service.healthPath}}
            port: {{.Values.service.targetPort}}
          failureThreshold: 30
          periodSeconds: 10
        lifecycle:
          preStop:
            exec:
              command: ["/bin/bash", "-c", "sleep 3"]
        ports:
        - containerPort: {{.Values.service.targetPort}}
          protocol: TCP
        resources: 
          limits:
            cpu: {{.Values.resources.limits.cpu}}
            memory: {{.Values.resources.limits.memory}}
          requests:
            cpu: {{.Values.resources.requests.cpu}}
            memory: {{.Values.resources.requests.memory}}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        securityContext:
          allowPrivilegeEscalation: false
          seccompProfile:
            type: RuntimeDefault
          readOnlyRootFilesystem: false
          capabilities:
            drop: [ 'NET_RAW', 'ALL' ] 
      dnsPolicy: ClusterFirst
      tolerations: 
      {{- if .Values.serverDeployment.nodeaffinity.enabled  }}
      - key: {{ .Values.serverDeployment.nodeaffinity.nodeTaintKey }}
        operator: "Equal" 
        value: {{ .Values.serverDeployment.nodeaffinity.nodeTaintValue }} 
        effect: "NoSchedule" 
      {{- end  }}
      - key: "spotInstance" 
        operator: "Equal" 
        value: "true" 
        effect: "PreferNoSchedule" 
      affinity: 
        nodeAffinity: 
          preferredDuringSchedulingIgnoredDuringExecution: 
          - weight: 1 
            preference: 
              matchExpressions: 
              - key: eks.amazonaws.com/capacityType 
                operator: In 
                values: 
                - spot
              {{- if .Values.serverDeployment.nodeaffinity.enabled  }}
              - key: {{ .Values.serverDeployment.nodeaffinity.nodeTaintKey }}
                operator: In
                values:
                -  {{ .Values.serverDeployment.nodeaffinity.nodeTaintValue }}
              {{- end}}  
          requiredDuringSchedulingIgnoredDuringExecution: 
              {{- if .Values.serverDeployment.nodeaffinity.enabled }}
                    nodeSelectorTerms: 
                      - matchExpressions: 
                        - key: {{ .Values.serverDeployment.nodeaffinity.nodeTaintKey }}
                          operator: In
                          values:
                          - {{ .Values.serverDeployment.nodeaffinity.nodeTaintValue }}
              {{- else }}
                    nodeSelectorTerms: 
                      - matchExpressions: 
                        - key: intent 
                          operator: In 
                          values: 
                          - apps 
              {{- end }}
{{- end }}